package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"time"

	"github.com/janapc/graphql-books-go/bookstore/graph/model"
	"github.com/janapc/graphql-books-go/bookstore/internal/entity"
	"github.com/janapc/graphql-books-go/bookstore/internal/infra/utils"
)

// Books is the resolver for the books field.
func (r *authorResolver) Books(ctx context.Context, obj *model.Author) ([]*model.Book, error) {
	authorId := obj.ID
	books, err := r.BookDB.FindBooksByAuthorId(authorId)
	if err != nil {
		return nil, utils.ErrorsMap["bookNotFoundError"]
	}
	var booksModel []*model.Book
	for _, book := range books {
		booksModel = append(booksModel, &model.Book{
			ID:          book.ID,
			Title:       book.Title,
			Description: book.Description,
			CreatedAt:   book.CreatedAt,
			UpdatedAt:   book.UpdatedAt,
		})
	}
	return booksModel, nil
}

// Author is the resolver for the author field.
func (r *bookResolver) Author(ctx context.Context, obj *model.Book) (*model.Author, error) {
	bookId := obj.ID
	author, err := r.AuthorDB.FindAuthorByBookId(bookId)
	if err != nil {
		return nil, utils.ErrorsMap["authorNotFoundError"]
	}
	return &model.Author{
		ID:        author.ID,
		Name:      author.Name,
		CreatedAt: author.CreatedAt,
		UpdatedAt: author.UpdatedAt,
	}, nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	book, err := entity.NewBook(input.Title, input.Description, input.AuthorID)
	if err != nil {
		return nil, err
	}
	err = r.BookDB.RegisterBook(book)
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	return &model.Book{
		ID:          book.ID,
		Title:       book.Title,
		Description: book.Description,
		CreatedAt:   book.CreatedAt,
		UpdatedAt:   book.UpdatedAt,
	}, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, title *string, description *string, authorID *string) (*model.Book, error) {
	book, err := r.BookDB.FindBookById(id)
	if err != nil {
		return nil, utils.ErrorsMap["bookNotFoundError"]
	}
	if title != nil {
		book.Title = *title
	}
	if description != nil {
		book.Description = *description
	}
	if authorID != nil {
		book.AuthorId = *authorID
	}
	book.UpdatedAt = time.Now()

	err = r.BookDB.UpdateBook(book)
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	return &model.Book{
		ID:          book.ID,
		Title:       book.Title,
		Description: book.Description,
		CreatedAt:   book.CreatedAt,
		UpdatedAt:   book.UpdatedAt,
	}, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (string, error) {
	err := r.BookDB.DeleteBook(id)
	if err != nil {
		return "", utils.ErrorsMap["serverError"]
	}
	return id, nil
}

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*model.Author, error) {
	author, err := entity.NewAuthor(input.Name)
	if err != nil {
		return nil, err
	}
	err = r.AuthorDB.RegisterAuthor(author)
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	return &model.Author{
		ID:        author.ID,
		Name:      author.Name,
		CreatedAt: author.CreatedAt,
		UpdatedAt: author.UpdatedAt,
	}, nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, id string, name *string) (*model.Author, error) {
	author, err := r.AuthorDB.FindAuthorById(id)
	if err != nil {
		return nil, utils.ErrorsMap["authorNotFoundError"]
	}
	if name != nil {
		author.Name = *name
	}
	author.UpdatedAt = time.Now()
	err = r.AuthorDB.UpdateAuthor(author)
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	return &model.Author{
		ID:        author.ID,
		Name:      author.Name,
		CreatedAt: author.CreatedAt,
		UpdatedAt: author.UpdatedAt,
	}, nil
}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, id string) (string, error) {
	err := r.AuthorDB.DeleteAuthor(id)
	if err != nil {
		return "", utils.ErrorsMap["serverError"]
	}
	return id, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	books, err := r.BookDB.ListBooks()
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	var booksModel []*model.Book
	for _, book := range books {
		booksModel = append(booksModel, &model.Book{
			ID:          book.ID,
			Title:       book.Title,
			Description: book.Description,
			CreatedAt:   book.CreatedAt,
			UpdatedAt:   book.UpdatedAt,
		})
	}
	return booksModel, nil
}

// GetBookByID is the resolver for the getBookById field.
func (r *queryResolver) GetBookByID(ctx context.Context, id string) (*model.Book, error) {
	book, err := r.BookDB.FindBookById(id)
	if err != nil {
		return nil, utils.ErrorsMap["bookNotFoundError"]
	}
	return &model.Book{
		ID:          book.ID,
		Title:       book.Title,
		Description: book.Description,
		CreatedAt:   book.CreatedAt,
		UpdatedAt:   book.UpdatedAt,
	}, nil
}

// SearchBooksByTitle is the resolver for the searchBooksByTitle field.
func (r *queryResolver) SearchBooksByTitle(ctx context.Context, title string) ([]*model.Book, error) {
	books, err := r.BookDB.SearchBooksByTitle(title)
	if err != nil {
		return nil, utils.ErrorsMap["bookNotFoundError"]
	}
	var booksModel []*model.Book
	for _, book := range books {
		booksModel = append(booksModel, &model.Book{
			ID:          book.ID,
			Title:       book.Title,
			Description: book.Description,
			CreatedAt:   book.CreatedAt,
			UpdatedAt:   book.UpdatedAt,
		})
	}
	return booksModel, nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	authors, err := r.AuthorDB.ListAuthors()
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	var authorsModel []*model.Author
	for _, author := range authors {
		authorModel := &model.Author{
			ID:        author.ID,
			Name:      author.Name,
			CreatedAt: author.CreatedAt,
			UpdatedAt: author.UpdatedAt,
		}
		authorsModel = append(authorsModel, authorModel)
	}
	return authorsModel, nil
}

// GetAuthorByID is the resolver for the getAuthorById field.
func (r *queryResolver) GetAuthorByID(ctx context.Context, id string) (*model.Author, error) {
	author, err := r.AuthorDB.FindAuthorById(id)
	if err != nil {
		return nil, utils.ErrorsMap["authorNotFoundError"]
	}
	return &model.Author{
		ID:        author.ID,
		Name:      author.Name,
		CreatedAt: author.CreatedAt,
		UpdatedAt: author.UpdatedAt,
	}, nil
}

// SearchAuthorsByName is the resolver for the searchAuthorsByName field.
func (r *queryResolver) SearchAuthorsByName(ctx context.Context, name string) ([]*model.Author, error) {
	authors, err := r.AuthorDB.SearchAuthorsByName(name)
	if err != nil {
		return nil, utils.ErrorsMap["authorNotFoundError"]
	}
	var authorsModel []*model.Author
	for _, author := range authors {
		authorsModel = append(authorsModel, &model.Author{
			ID:        author.ID,
			Name:      author.Name,
			CreatedAt: author.CreatedAt,
			UpdatedAt: author.UpdatedAt,
		})
	}
	return authorsModel, nil
}

// Author returns AuthorResolver implementation.
func (r *Resolver) Author() AuthorResolver { return &authorResolver{r} }

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authorResolver struct{ *Resolver }
type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
