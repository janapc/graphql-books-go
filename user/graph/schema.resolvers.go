package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"time"

	"github.com/janapc/graphql-books-go/user/graph/model"
	"github.com/janapc/graphql-books-go/user/internal/entity"
	"github.com/janapc/graphql-books-go/user/internal/infra/service"
	"github.com/janapc/graphql-books-go/user/internal/infra/utils"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := entity.NewUser(input.Email, input.Password)
	if err != nil {
		return nil, err
	}
	_, err = r.UserDB.FindUserByEmail(input.Email)
	if err == nil {
		return nil, utils.ErrorsMap["userExistsError"]
	}
	err = r.UserDB.RegisterUser(user)
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	return &model.User{
		ID:        user.ID,
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
		DeletedAt: user.DeletedAt,
	}, nil
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, email string, password string) (string, error) {
	user, err := r.UserDB.FindUserByEmail(email)
	if err != nil {
		return "", utils.ErrorsMap["userNotFoundError"]
	}
	err = user.ComparePassword(password)
	if err != nil {
		return "", utils.ErrorsMap["passwordWrongError"]
	}
	token, err := service.GenerateToken(user.ID, user.Email)
	if err != nil {
		return "", utils.ErrorsMap["serverError"]
	}
	return token, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, password *string, email *string) (*model.User, error) {
	user, err := r.UserDB.FindUserById(id)
	if err != nil {
		return nil, utils.ErrorsMap["userNotFoundError"]
	}
	if password != nil {
		err = entity.ValidatePasswordUser(*password)
		if err != nil {
			return nil, err
		}
		hash, err := entity.GeneratePasswordUser(*password)
		if err != nil {
			return nil, utils.ErrorsMap["serverError"]
		}
		user.Password = string(hash)
	}
	if email != nil {
		err = entity.ValidateEmailUser(*email)
		if err != nil {
			return nil, err
		}
		user.Email = *email
	}
	user.UpdatedAt = time.Now()
	err = r.UserDB.UpdateUser(user)
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	return &model.User{
		ID:        user.ID,
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
		DeletedAt: user.DeletedAt,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (string, error) {
	err := r.UserDB.DeleteUser(id)
	if err != nil {
		return "", utils.ErrorsMap["serverError"]
	}
	return id, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserDB.ListUsers()
	if err != nil {
		return nil, utils.ErrorsMap["serverError"]
	}
	var usersModel []*model.User
	for _, user := range users {
		usersModel = append(usersModel, &model.User{
			ID:        user.ID,
			Email:     user.Email,
			CreatedAt: user.CreatedAt,
			UpdatedAt: user.UpdatedAt,
			DeletedAt: user.DeletedAt,
		})
	}
	return usersModel, nil
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	user, err := r.UserDB.FindUserById(id)
	if err != nil {
		return nil, utils.ErrorsMap["userNotFoundError"]
	}
	return &model.User{
		ID:        user.ID,
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
		DeletedAt: user.DeletedAt,
	}, nil
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	user, err := r.UserDB.FindUserByEmail(email)
	if err != nil {
		return nil, utils.ErrorsMap["userNotFoundError"]
	}
	return &model.User{
		ID:        user.ID,
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
		DeletedAt: user.DeletedAt,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
